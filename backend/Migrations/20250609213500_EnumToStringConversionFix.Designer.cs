// <auto-generated />
using System;
using Hotel_MVP.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250609213500_EnumToStringConversionFix")]
    partial class EnumToStringConversionFix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Hotel_MVP.AdminProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("adminProfileId")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("AvatarURL")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("AvatarURL");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("Notes");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("adminId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AdminProfiles");
                });

            modelBuilder.Entity("Hotel_MVP.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("deptId")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("DeptDescription")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("deptDesc");

                    b.Property<string>("DeptName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("deptName");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Hotel_MVP.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("employeeId")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("departmentId");

                    b.Property<string>("EmplFirstname")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("emplFirstname");

                    b.Property<string>("EmplJobPosition")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("emplJobPosition");

                    b.Property<string>("EmplLastname")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("emplLastname");

                    b.Property<string>("EmplStatus")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("emplStatus");

                    b.Property<Guid>("EmployeeSalaryId")
                        .HasColumnType("uuid")
                        .HasColumnName("employeeSalaryId");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeSalaryId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Hotel_MVP.EmployeeSalary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("employeeSalaryId")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("decimal(9,2)")
                        .HasColumnName("hourlyRate");

                    b.Property<decimal>("MonthlyHours")
                        .HasColumnType("decimal(9,2)")
                        .HasColumnName("monthlyHours");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(9,2)")
                        .HasColumnName("paymentAmount");

                    b.Property<DateOnly>("PaymentDate")
                        .HasColumnType("date")
                        .HasColumnName("paymentDate");

                    b.Property<decimal>("TimeWorked")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("timeWorked");

                    b.HasKey("Id");

                    b.ToTable("EmployeeSalaries");
                });

            modelBuilder.Entity("Hotel_MVP.GuestProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guestProfileId")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("AvatarURL")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("AvatarURL");

                    b.Property<string>("BanReason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("banReason");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("boolean")
                        .HasColumnName("isBanned");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("isVerified");

                    b.Property<DateTime?>("LastReviewDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LastReviewDate");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("Notes");

                    b.Property<int?>("ReviewCount")
                        .HasColumnType("integer")
                        .HasColumnName("ReviewCount");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("GuestProfiles");
                });

            modelBuilder.Entity("Hotel_MVP.Models.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("bookingId")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("BookingStatusString")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("bookingStatus");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("checkInDate");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("checkOutDate");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid")
                        .HasColumnName("roomId");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Hotel_MVP.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("reviewId")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uuid")
                        .HasColumnName("bookingId");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt");

                    b.Property<DateTime?>("ModeratedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModeratorComment")
                        .HasColumnType("varchar(512)")
                        .HasColumnName("moderatorComment");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid")
                        .HasColumnName("roomId");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Hotel_MVP.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("roomId")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<decimal>("Area")
                        .HasColumnType("numeric")
                        .HasColumnName("area");

                    b.Property<int>("Availability")
                        .HasColumnType("integer")
                        .HasColumnName("availability");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<int>("CleaningStatus")
                        .HasColumnType("integer")
                        .HasColumnName("cleaningStatus");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Floor")
                        .HasColumnType("integer")
                        .HasColumnName("floor");

                    b.Property<DateTime?>("LastCleaned")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastCleaned");

                    b.Property<decimal>("RoomCharge")
                        .HasColumnType("decimal(9,2)")
                        .HasColumnName("roomCharge");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("integer")
                        .HasColumnName("roomNumber");

                    b.Property<int>("RoomType")
                        .HasColumnType("integer")
                        .HasColumnName("roomType");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Hotel_MVP.RoomPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid")
                        .HasColumnName("roomId");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomPhotos");
                });

            modelBuilder.Entity("Hotel_MVP.RoomRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ratingId")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("comment");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid")
                        .HasColumnName("roomId");

                    b.Property<int>("RoomRate")
                        .HasColumnType("integer")
                        .HasColumnName("roomRate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("RoomRatings");
                });

            modelBuilder.Entity("Hotel_MVP.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("serviceId")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("serviceIsActive");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("serviceName");

                    b.Property<decimal>("ServicePrice")
                        .HasColumnType("decimal(9,2)")
                        .HasColumnName("servicePrice");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Hotel_MVP.ServiceEmployee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employeeId");

                    b.Property<Guid>("ServiceOrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("serviceOrderId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ServiceOrderId");

                    b.ToTable("ServiceEmployees");
                });

            modelBuilder.Entity("Hotel_MVP.ServiceOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("serviceOrderId")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("departmentId");

                    b.Property<DateOnly>("OrderDate")
                        .HasColumnType("date")
                        .HasColumnName("orderDate");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("orderStatus");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid")
                        .HasColumnName("roomId");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("serviceId");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoomId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("ServiceOrders");
                });

            modelBuilder.Entity("Hotel_MVP.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("userId")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastLoginDate");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registrationDate");

                    b.Property<string>("RoleString")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userEmail");

                    b.Property<string>("UserFirstname")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("userFirstname");

                    b.Property<string>("UserLastname")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("userLastname");

                    b.Property<string>("UserPasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userPasswordHash");

                    b.Property<string>("UserPhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userPhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Hotel_MVP.AdminProfile", b =>
                {
                    b.HasOne("Hotel_MVP.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hotel_MVP.Employee", b =>
                {
                    b.HasOne("Hotel_MVP.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hotel_MVP.EmployeeSalary", "EmployeeSalary")
                        .WithMany()
                        .HasForeignKey("EmployeeSalaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("EmployeeSalary");
                });

            modelBuilder.Entity("Hotel_MVP.GuestProfile", b =>
                {
                    b.HasOne("Hotel_MVP.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hotel_MVP.Models.Entities.Booking", b =>
                {
                    b.HasOne("Hotel_MVP.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hotel_MVP.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hotel_MVP.Review", b =>
                {
                    b.HasOne("Hotel_MVP.Models.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hotel_MVP.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hotel_MVP.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hotel_MVP.RoomPhoto", b =>
                {
                    b.HasOne("Hotel_MVP.Room", "Room")
                        .WithMany("Images")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Hotel_MVP.RoomRating", b =>
                {
                    b.HasOne("Hotel_MVP.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hotel_MVP.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hotel_MVP.ServiceEmployee", b =>
                {
                    b.HasOne("Hotel_MVP.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hotel_MVP.ServiceOrder", "ServiceOrder")
                        .WithMany()
                        .HasForeignKey("ServiceOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("ServiceOrder");
                });

            modelBuilder.Entity("Hotel_MVP.ServiceOrder", b =>
                {
                    b.HasOne("Hotel_MVP.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hotel_MVP.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hotel_MVP.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hotel_MVP.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Room");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hotel_MVP.Room", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
